# -*- coding: utf-8 -*-
"""ML_Project2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16VLihfq-uN2wtE_wd75mCkaegYO_1g3_

**Synthetic Data**
"""

import numpy as np
import matplotlib.pyplot as plt
from sklearn.datasets import make_blobs
from sklearn.cluster import KMeans

# Generate synthetic data with 3 clusters
X_synthetic, _ = make_blobs(n_samples=300, centers=3, cluster_std=0.60, random_state=0)

# Plot the synthetic data
plt.figure(figsize=(10, 5))
plt.scatter(X_synthetic[:, 0], X_synthetic[:, 1], s=50)
plt.title('Synthetic Data')
plt.xlabel('X')
plt.ylabel('Y')
plt.show()

# K-means clustering
kmeans = KMeans(n_clusters=3)
kmeans.fit(X_synthetic)
kmeans_labels = kmeans.labels_

# Plot K-means clustering results with centroids
plt.figure(figsize=(10, 5))
plt.scatter(X_synthetic[:, 0], X_synthetic[:, 1], c=kmeans_labels, s=50, cmap='viridis')
plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], c='red', marker='X', s=200, label='Centroids')
plt.title('K-means Clustering with Centroids')
plt.xlabel('X')
plt.ylabel('Y')
plt.legend()
plt.show()

# DBSCAN clustering
dbscan = DBSCAN(eps=0.5, min_samples=5)
dbscan_labels = dbscan.fit_predict(X_synthetic)

# Plot DBSCAN clustering results
plt.figure(figsize=(10, 5))
plt.scatter(X_synthetic[:, 0], X_synthetic[:, 1], c=dbscan_labels, s=50, cmap='viridis')
plt.title('DBSCAN Clustering')
plt.xlabel('X')
plt.ylabel('Y')
plt.show()

# Hierarchical clustering
hierarchical = AgglomerativeClustering(n_clusters=3)
hierarchical_labels = hierarchical.fit_predict(X_synthetic)

# Calculate cluster means
cluster_means = []
for label in np.unique(hierarchical_labels):
    cluster_means.append(np.mean(X_synthetic[hierarchical_labels == label], axis=0))

cluster_means = np.array(cluster_means)

# Plot Hierarchical clustering results with cluster means
plt.figure(figsize=(10, 5))
plt.scatter(X_synthetic[:, 0], X_synthetic[:, 1], c=hierarchical_labels, s=50, cmap='viridis')
plt.scatter(cluster_means[:, 0], cluster_means[:, 1], c='red', marker='X', s=200, label='Cluster Means')
plt.title('Hierarchical Clustering with Cluster Means')
plt.xlabel('X')
plt.ylabel('Y')
plt.legend()
plt.show()

"""**Real Data**"""

import pandas as pd
from sklearn.preprocessing import StandardScaler

# Load the data from the CSV file
data = pd.read_csv("Country_Dataset.csv")

# Select features for clustering
X_real = data[['child_mort', 'life_expec']]

# Standardize the data
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X_real)

# Plot the synthetic data
plt.figure(figsize=(10, 5))
plt.scatter(X_scaled[:, 0], X_scaled[:, 1], s=50, alpha=0.5)
plt.title('Country Data')
plt.xlabel('Child Mortality')
plt.ylabel('Life Expectancy')
plt.show()

# K-means clustering
kmeans = KMeans(n_clusters=2)
kmeans_labels = kmeans.fit_predict(X_scaled)

# Visualize K-means clustering results
plt.figure(figsize=(10, 5))
plt.scatter(X_real['child_mort'], X_real['life_expec'], c=kmeans_labels, cmap='viridis')
plt.title('K-means Clustering')
plt.xlabel('Child Mortality')
plt.ylabel('Life Expectancy')
plt.show()

# DBSCAN clustering
dbscan = DBSCAN(eps=0.5, min_samples=3)
dbscan_labels = dbscan.fit_predict(X_scaled)

# Visualize DBSCAN clustering results
plt.figure(figsize=(10, 5))
plt.scatter(X_real['child_mort'], X_real['life_expec'], c=dbscan_labels, cmap='viridis')
plt.title('DBSCAN Clustering')
plt.xlabel('Child Mortality')
plt.ylabel('Life Expectancy')
plt.show()

# Hierarchical clustering
hierarchical = AgglomerativeClustering(n_clusters=2)
hierarchical_labels = hierarchical.fit_predict(X_scaled)

# Visualize Hierarchical clustering results
plt.figure(figsize=(10, 5))
plt.scatter(X_real['child_mort'], X_real['life_expec'], c=hierarchical_labels, cmap='viridis')
plt.title('Hierarchical Clustering')
plt.xlabel('Child Mortality')
plt.ylabel('Life Expectancy')
plt.show()

import matplotlib.pyplot as plt

# Plot the synthetic data
plt.figure(figsize=(12, 6))
plt.subplot(1, 2, 1)
plt.scatter(X_synthetic[:, 0], X_synthetic[:, 1], c='blue', label='Synthetic Data', s=50, alpha=0.5)
plt.title('Synthetic Data')
plt.xlabel('X')
plt.ylabel('Y')
plt.legend()

# Plot the real data
plt.subplot(1, 2, 2)
plt.scatter(X_scaled[:, 0], X_scaled[:, 1], s=50, alpha=0.5)
plt.title('Real Data')
plt.xlabel('Child Mortality')
plt.ylabel('Life Expectancy')
plt.legend()

plt.tight_layout()
plt.show()